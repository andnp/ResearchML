#include <dirent.h>
#include <stdio.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

void getAllFiles(std::string root, std::string path, std::vector<std::string> &vec) {  // NOLINT
    DIR *dir = opendir((root + path).c_str());

    struct dirent *entry = readdir(dir);
    while (entry != NULL) {
        struct stat entrystat;
        std::string str(entry->d_name);
        stat((root+path+"/"+str).c_str(), &entrystat);
        if (S_ISDIR(entrystat.st_mode)) {
            if (str != "." && str != ".." && str != "libs" && str != "tests" && str != ".git" && str != "build" && str != "external") {
                getAllFiles(root, path + "/" + str, vec);
            }
        } else {
            if (str.size() > 4 && str.substr(str.size() - 4) == ".hpp" && path != "") {
                // printf("%s\n", entry->d_name);
                vec.push_back(path + "/" + str);
            }
        }

        entry = readdir(dir);
    }

    closedir(dir);
}

int main(int argc, char* argv[]) {
    const char* PATH = argv[1];
    std::vector<std::string> vec;
    getAllFiles(PATH, "", vec);
    std::stringstream new_file;
    new_file << "// THIS FILE IS AUTOMATICALLY GENERATED. NO NEED TO EDIT" << std::endl;
    new_file << "#pragma once" << std::endl;
    for (int i = 0; i < vec.size(); ++i) {
        vec[i].erase(0, 1);
        new_file << "#include \"" << vec[i] << "\"" << std::endl;
    }
    std::stringstream old_file;
    std::string line;
    std::ifstream myfile(std::string(PATH) + "/gpucompute.hpp");
    while (getline(myfile, line)) {
        old_file << line << std::endl;
    }
    myfile.close();
    if (new_file.str() != old_file.str()) {
        std::ofstream outdata;
        outdata.open(std::string(PATH) + "/gpucompute.hpp");
        outdata << new_file.str();
        outdata.close();
    } else {
        std::cout << "gpucompute.hpp is up to date" << std::endl;
    }
}
